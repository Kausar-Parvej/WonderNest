name: Deploy to Azure VM

on:
  push:
    branches:
      - main
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}
      
      - name: Setup SSH connection
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Add host to known_hosts with better error handling
          ssh-keyscan -H ${{ secrets.AZURE_VM_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || echo "Host key scan failed, continuing..."
          chmod 644 ~/.ssh/known_hosts
          
          # Test SSH connection with timeout
          ssh -o ConnectTimeout=30 -o BatchMode=yes ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "echo 'SSH connection successful' && mkdir -p ~/wondernest-deployment"
      
      - name: Copy project files
        run: |
          rsync -avz --delete --compress-level=9 --partial --inplace \
            --exclude='.git' --exclude='node_modules' --exclude='target' \
            --exclude='.github' --exclude='wondernest.tar.gz' --exclude='*.log' \
            --exclude='frontend/dist' --exclude='frontend/build' \
            --exclude='**/.DS_Store' --exclude='**/.env.local' \
            --exclude='**/node_modules' --exclude='**/target' \
            --exclude='**/*.class' --exclude='**/.gradle' \
            --exclude='playwright-report' --exclude='e2e/test-results' \
            ./ ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:~/wondernest-deployment/
      
      - name: Create environment file
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "cat > ~/wondernest-deployment/.env << 'EOF'
          SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          EOF"
      
      - name: Stop existing containers
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            cd ~/wondernest-deployment
            if [ -f docker-compose.deploy.yml ]; then
              docker-compose -f docker-compose.deploy.yml down || true
            fi
          "
      
      - name: Build and deploy
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            cd ~/wondernest-deployment
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            # Build only changed services
            docker-compose -f docker-compose.deploy.yml build --parallel
            # Start services
            docker-compose -f docker-compose.deploy.yml up -d
            # Clean up unused images after successful start
            docker image prune -f || true
          "

      
      - name: Wait for services
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            cd ~/wondernest-deployment
            echo 'Waiting for services to start...'
            timeout 30 bash -c '
              while true; do
                # Check for any containers from this deployment
                running=\$(docker-compose -f docker-compose.deploy.yml ps --services --filter \"status=running\" | wc -l)
                total=\$(docker-compose -f docker-compose.deploy.yml ps --services | wc -l)
                echo \"Services running: \$running/\$total\"
                
                # If at least 2 services are running, consider it successful
                if [ \$running -ge 2 ]; then
                  echo \"Sufficient services are running\"
                  break
                fi
                sleep 2
              done
            ' || echo 'Timeout reached, but services may still be starting'
          "
      
      - name: Verify deployment
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            cd ~/wondernest-deployment
            echo '=== Container Status ==='
            docker-compose -f docker-compose.deploy.yml ps
          "
          
      - name: Test frontend accessibility
        run: |
          echo 'Testing frontend accessibility...'
          curl -f http://${{ secrets.AZURE_VM_HOST }} || echo 'Frontend connection failed - check Nginx and frontend container'